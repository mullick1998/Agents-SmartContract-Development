package thesis.SupplyChain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SupplyChain extends Contract {
    public static final String BINARY = "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a3620000d0336200014960201b60201c565b620000e133620001aa60201b60201c565b620000f2336200020b60201b60201c565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016006819055506001600581905550620003b5565b620001648160016200026c60201b62003b081790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f561138658ca49a8540dc70dcfe64c9026c1c5b9344642242dd6562970f9c127860405160405180910390a250565b620001c58160026200026c60201b62003b081790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167fd8a7ad7929975a375d2b12bf49040286b5b105df0fe351f10df6d85e5b7142f760405160405180910390a250565b620002268160036200026c60201b62003b081790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002a757600080fd5b620002b982826200032260201b60201c565b15620002c457600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200035e57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6150f380620003c56000396000f3fe6080604052600436106101c25760003560e01c806377c45913116100f7578063db0e6a2f11610095578063dfe4fa7611610064578063dfe4fa7614610629578063e02e64ea14610645578063f2fde38b14610670578063fe19d15214610699576101c2565b8063db0e6a2f146105a9578063dd589030146105c0578063de07f34e146105e9578063de63bdb914610600576101c2565b80638ec4f505116100d15780638ec4f505146105105780638f32d59b14610539578063b9a40d0414610564578063cbb34d4f14610580576101c2565b806377c459131461048857806377f3312b146104cb5780637cba6e21146104f4576101c2565b80635399955d1161016457806364d1ba1f1161013e57806364d1ba1f146103a857806366225ff9146103e5578063714b41f31461042c578063715018a614610471576101c2565b80635399955d146103195780635da09b88146103425780635f8a5afa1461037f576101c2565b80631e968862116101a05780631e9688621461026b57806337b2f92c146102b05780633b306369146102d957806341c0e1b514610302576101c2565b80630596dc29146101c75780631154501c146101f057806317d4a4911461022e575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e991906142c2565b6106b0565b005b3480156101fc57600080fd5b50610217600480360381019061021291906142c2565b6108df565b60405161022592919061483b565b60405180910390f35b34801561023a57600080fd5b5061025560048036038101906102509190614299565b61092c565b6040516102629190614665565b60405180910390f35b34801561027757600080fd5b50610292600480360381019061028d91906142c2565b610949565b6040516102a79998979695949392919061499a565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d291906142c2565b610e2f565b005b3480156102e557600080fd5b5061030060048036038101906102fb91906142c2565b61105e565b005b34801561030e57600080fd5b5061031761128d565b005b34801561032557600080fd5b50610340600480360381019061033b919061433f565b61132d565b005b34801561034e57600080fd5b5061036960048036038101906103649190614299565b611868565b6040516103769190614665565b60405180910390f35b34801561038b57600080fd5b506103a660048036038101906103a19190614299565b611885565b005b3480156103b457600080fd5b506103cf60048036038101906103ca9190614299565b6118a3565b6040516103dc9190614665565b60405180910390f35b3480156103f157600080fd5b5061040c600480360381019061040791906142c2565b6118c0565b6040516104239b9a999897969594939291906148da565b60405180910390f35b34801561043857600080fd5b50610453600480360381019061044e91906142c2565b611dbb565b6040516104689998979695949392919061499a565b60405180910390f35b34801561047d57600080fd5b506104866122a1565b005b34801561049457600080fd5b506104af60048036038101906104aa91906142c2565b6123ef565b6040516104c29796959493929190614864565b60405180910390f35b3480156104d757600080fd5b506104f260048036038101906104ed91906143d2565b6128be565b005b61050e600480360381019061050991906142eb565b612b09565b005b34801561051c57600080fd5b5061053760048036038101906105329190614299565b612ef6565b005b34801561054557600080fd5b5061054e612f14565b60405161055b9190614665565b60405180910390f35b61057e600480360381019061057991906142c2565b612f6b565b005b34801561058c57600080fd5b506105a760048036038101906105a291906142c2565b61319a565b005b3480156105b557600080fd5b506105be6133c9565b005b3480156105cc57600080fd5b506105e760048036038101906105e291906143d2565b6133d4565b005b3480156105f557600080fd5b506105fe613621565b005b34801561060c57600080fd5b5061062760048036038101906106229190614299565b61362c565b005b610643600480360381019061063e91906142eb565b61364a565b005b34801561065157600080fd5b5061065a613a38565b604051610667919061464a565b60405180910390f35b34801561067c57600080fd5b5061069760048036038101906106929190614299565b613a61565b005b3480156106a557600080fd5b506106ae613afd565b005b6106b9336118a3565b6106c257600080fd5b80600460098111156106fd577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115610759577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079090614760565b60405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461083e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083590614780565b60405180910390fd5b600560076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561089e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fee82be1f7a6bfb16a15acf8ecbb38327cf93ef35166206492b476fb143be5a2d836040516108d29190614820565b60405180910390a1505050565b600080600060086000858152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806000015181602001519250925050915091565b6000610942826001613bb490919063ffffffff16565b9050919050565b6000806000606060008060008060606000600760008c8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054610a4990614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7590614be0565b8015610ac25780601f10610a9757610100808354040283529160200191610ac2565b820191906000526020600020905b815481529060010190602001808311610aa557829003601f168201915b5050505050815260200160058201548152602001600682018054610ae590614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054610b1190614be0565b8015610b5e5780601f10610b3357610100808354040283529160200191610b5e565b820191906000526020600020905b815481529060010190602001808311610b4157829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff166009811115610bd0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6009811115610c08577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054610c7290614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054610c9e90614be0565b8015610ceb5780601f10610cc057610100808354040283529160200191610ceb565b820191906000526020600020905b815481529060010190602001808311610cce57829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054610d5a90614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8690614be0565b8015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101600151886101800151995099509950995099509950995099509950509193959799909294969850565b610e3833611868565b610e4157600080fd5b8060086009811115610e7c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115610ed8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14610f18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0f906146a0565b60405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb490614780565b60405180910390fd5b600960076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561101d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f322f34e90f2269750b3e28178631d975cc678db36f21098fe548b7f755ce0bd0836040516110519190614820565b60405180910390a1505050565b611067336118a3565b61107057600080fd5b80600760098111156110ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115611107577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14611147576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113e906146e0565b60405180910390fd5b60076000838152602001908152602001600020600a0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e390614780565b60405180910390fd5b600860076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561124c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f7287d6f591ede70e386683b60c018672ab3236da1d7449a774f2f999329bd393836040516112809190614820565b60405180910390a1505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561132b576000611310600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613c46565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b565b6113363361092c565b61133f57600080fd5b60008061134a614044565b6006548160000181815250508681602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505033816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050858160800181905250600654876113e79190614aa7565b8160a0018181525050848160c001819052508381610100018181525050428160e00181815250506000816101200181815250506000816101400190600981111561145a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90816009811115611494577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b815250508281610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506040518060400160405280600481526020017f4d722e580000000000000000000000000000000000000000000000000000000081525081610180018190525081816101a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506040518060400160405280600481526020017f4d722e5900000000000000000000000000000000000000000000000000000000815250816101c001819052508060076000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550608082015181600401908051906020019061165a92919061414a565b5060a0820151816005015560c082015181600601908051906020019061168192919061414a565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548160ff021916908360098111156116f4577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555061016082015181600a0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600b01908051906020019061175e92919061414a565b506101a082015181600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101c082015181600d0190805190602001906117c492919061414a565b5090505060006117d26141d0565b818160000181815250508181602001818152505080600860008b8152602001908152602001600020600082015181600001556020820151816001015590505060016006546118209190614aa7565b6006819055507f450f0ca4d112999acf0af70e42b45b5e285434a386833a43e0cc3ce5279cfd0a896040516118559190614820565b60405180910390a1505050505050505050565b600061187e826003613bb490919063ffffffff16565b9050919050565b61188e3361092c565b61189757600080fd5b6118a081613c50565b50565b60006118b9826002613bb490919063ffffffff16565b9050919050565b6000806000606060008060008060006060806000600760008e8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820180546119c390614be0565b80601f01602080910402602001604051908101604052809291908181526020018280546119ef90614be0565b8015611a3c5780601f10611a1157610100808354040283529160200191611a3c565b820191906000526020600020905b815481529060010190602001808311611a1f57829003601f168201915b5050505050815260200160058201548152602001600682018054611a5f90614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054611a8b90614be0565b8015611ad85780601f10611aad57610100808354040283529160200191611ad8565b820191906000526020600020905b815481529060010190602001808311611abb57829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff166009811115611b4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6009811115611b82577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054611bec90614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054611c1890614be0565b8015611c655780601f10611c3a57610100808354040283529160200191611c65565b820191906000526020600020905b815481529060010190602001808311611c4857829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054611cd490614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054611d0090614be0565b8015611d4d5780601f10611d2257610100808354040283529160200191611d4d565b820191906000526020600020905b815481529060010190602001808311611d3057829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101600151886101a001518961018001518a6101c001519b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b6000806000606060008060008060606000600760008c8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054611ebb90614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054611ee790614be0565b8015611f345780601f10611f0957610100808354040283529160200191611f34565b820191906000526020600020905b815481529060010190602001808311611f1757829003601f168201915b5050505050815260200160058201548152602001600682018054611f5790614be0565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8390614be0565b8015611fd05780601f10611fa557610100808354040283529160200191611fd0565b820191906000526020600020905b815481529060010190602001808311611fb357829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff166009811115612042577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600981111561207a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b820180546120e490614be0565b80601f016020809104026020016040519081016040528092919081815260200182805461211090614be0565b801561215d5780601f106121325761010080835404028352916020019161215d565b820191906000526020600020905b81548152906001019060200180831161214057829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820180546121cc90614be0565b80601f01602080910402602001604051908101604052809291908181526020018280546121f890614be0565b80156122455780601f1061221a57610100808354040283529160200191612245565b820191906000526020600020905b81548152906001019060200180831161222857829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101a00151886101c00151995099509950995099509950995099509950509193959799909294969850565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612331576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612328906147a0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008060606000806000600760008a8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016004820180546124eb90614be0565b80601f016020809104026020016040519081016040528092919081815260200182805461251790614be0565b80156125645780601f1061253957610100808354040283529160200191612564565b820191906000526020600020905b81548152906001019060200180831161254757829003601f168201915b505050505081526020016005820154815260200160068201805461258790614be0565b80601f01602080910402602001604051908101604052809291908181526020018280546125b390614be0565b80156126005780601f106125d557610100808354040283529160200191612600565b820191906000526020600020905b8154815290600101906020018083116125e357829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff166009811115612672577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60098111156126aa577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b8201805461271490614be0565b80601f016020809104026020016040519081016040528092919081815260200182805461274090614be0565b801561278d5780601f106127625761010080835404028352916020019161278d565b820191906000526020600020905b81548152906001019060200180831161277057829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d820180546127fc90614be0565b80601f016020809104026020016040519081016040528092919081815260200182805461282890614be0565b80156128755780601f1061284a57610100808354040283529160200191612875565b820191906000526020600020905b81548152906001019060200180831161285857829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560e00151866101200151975097509750975097509750975050919395979092949650565b6128c73361092c565b6128d057600080fd5b816001600981111561290b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115612967577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146129a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161299e906147c0565b60405180910390fd5b6007600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612a4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a4390614780565b60405180910390fd5b600260076000868152602001908152602001600020600a0160006101000a81548160ff02191690836009811115612aac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055508260076000868152602001908152602001600020600801819055507faec623c8803eb3c795344cb3d2178da45139e85d984a1dc348cf9dc8bd7ff16084604051612afb9190614820565b60405180910390a150505050565b612b1233611868565b612b1b57600080fd5b8160066009811115612b56577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115612bb2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14612bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612be9906146c0565b60405180910390fd5b600760008481526020019081526020016000206008015480341015612c4c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4390614700565b60405180910390fd5b833360006007600084815260200190815260200160002060080154905060008134612c779190614afd565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612cbf573d6000803e3d6000fd5b506000612d01600760008b8152602001908152602001600020600a0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613c46565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600760008c8152602001908152602001600020600801549081150290604051600060405180830381858888f19350505050158015612d5f573d6000803e3d6000fd5b5033600760008b815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008b8152602001908152602001600020600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600760008b8152602001908152602001600020600d019080519060200190612e3492919061414a565b5060078060008b8152602001908152602001600020600a0160006101000a81548160ff02191690836009811115612e94577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555043600860008b8152602001908152602001600020600101819055507faa7352d10146444c3afd9bd7fb0ae56b0a85e81139536bbec3f1f660fddd7be189604051612ee39190614820565b60405180910390a1505050505050505050565b612eff33611868565b612f0857600080fd5b612f1181613caa565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b612f743361092c565b612f7d57600080fd5b8060036009811115612fb8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115613014577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613054576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304b90614720565b60405180910390fd5b6007600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146130f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130f090614780565b60405180910390fd5b600460076000858152602001908152602001600020600a0160006101000a81548160ff02191690836009811115613159577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507f25727bef8a186dd95a062151451f2d651551b53124c18208d7653b1217ae31ba8360405161318d9190614820565b60405180910390a1505050565b6131a33361092c565b6131ac57600080fd5b80600060098111156131e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115613243577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161327a90614800565b60405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613328576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161331f90614780565b60405180910390fd5b600160076000858152602001908152602001600020600a0160006101000a81548160ff02191690836009811115613388577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055507fd387ba7c66ff37ae33b5cbb19fe94bcbfe666ea31635889fba1abc7198c2f1bd836040516133bc9190614820565b60405180910390a1505050565b6133d233613d04565b565b6133dd336118a3565b6133e657600080fd5b8160056009811115613421577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff16600981111561347d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b146134bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134b490614740565b60405180910390fd5b6007600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355990614780565b60405180910390fd5b600660076000868152602001908152602001600020600a0160006101000a81548160ff021916908360098111156135c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b02179055508260076000868152602001908152602001600020600801819055507f86c3594f216ced937eb7fdc5b2c3e64fb4ae2badf95562d2db7d99f58c6e56d66005546040516136139190614820565b60405180910390a150505050565b61362a33613d5e565b565b613635336118a3565b61363e57600080fd5b61364781613db8565b50565b613653336118a3565b61365c57600080fd5b8160026009811115613697577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156136f3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14613733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161372a906147e0565b60405180910390fd5b60076000848152602001908152602001600020600801548034101561378d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161378490614700565b60405180910390fd5b8333600060076000848152602001908152602001600020600801549050600081346137b89190614afd565b90508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613800573d6000803e3d6000fd5b506000613842600760008b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16613c46565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600760008c8152602001908152602001600020600801549081150290604051600060405180830381858888f193505050501580156138a0573d6000803e3d6000fd5b5033600760008b815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008b8152602001908152602001600020600a0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600760008b8152602001908152602001600020600b01908051906020019061397592919061414a565b506003600760008b8152602001908152602001600020600a0160006101000a81548160ff021916908360098111156139d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b021790555043600860008b8152602001908152602001600020600001819055507f0b2ad8447953e780f58d2343ea44f2be15d412dc219f1ca265728cdc5cac9b6689604051613a259190614820565b60405180910390a1505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ae8906147a0565b60405180910390fd5b613afa81613e12565b50565b613b0633613f3f565b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613b4257600080fd5b613b4c8282613bb4565b15613b5657600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613bef57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000819050919050565b613c64816001613b0890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f561138658ca49a8540dc70dcfe64c9026c1c5b9344642242dd6562970f9c127860405160405180910390a250565b613cbe816003613b0890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b613d18816003613f9990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fdb7176e79cffef81cb01767dd0447a0b24bb72ca9778d4b245581086b2a7e6db60405160405180910390a250565b613d72816001613f9990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f2fed5abf6a80d6dfe30b4895481b2fc5d7dce5f8f7b931832f4a2947d5040c7f60405160405180910390a250565b613dcc816002613b0890919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fd8a7ad7929975a375d2b12bf49040286b5b105df0fe351f10df6d85e5b7142f760405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613e82576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e7990614680565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b613f53816002613f9990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f7f865f710a7604537eb2bc0334f082fa642d210a705398937f53663384485b2860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613fd357600080fd5b613fdd8282613bb4565b613fe657600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b604051806101e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081526020016000815260200160608152602001600081526020016000815260200160008152602001600060098111156140fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b82805461415690614be0565b90600052602060002090601f01602090048101928261417857600085556141bf565b82601f1061419157805160ff19168380011785556141bf565b828001600101855582156141bf579182015b828111156141be5782518255916020019190600101906141a3565b5b5090506141cc91906141ea565b5090565b604051806040016040528060008152602001600081525090565b5b808211156142035760008160009055506001016141eb565b5090565b600061421a61421584614a5a565b614a35565b90508281526020810184848401111561423257600080fd5b61423d848285614b9e565b509392505050565b6000813590506142548161508f565b92915050565b600082601f83011261426b57600080fd5b813561427b848260208601614207565b91505092915050565b600081359050614293816150a6565b92915050565b6000602082840312156142ab57600080fd5b60006142b984828501614245565b91505092915050565b6000602082840312156142d457600080fd5b60006142e284828501614284565b91505092915050565b600080604083850312156142fe57600080fd5b600061430c85828601614284565b925050602083013567ffffffffffffffff81111561432957600080fd5b6143358582860161425a565b9150509250929050565b6000806000806080858703121561435557600080fd5b600061436387828801614284565b945050602085013567ffffffffffffffff81111561438057600080fd5b61438c8782880161425a565b935050604085013567ffffffffffffffff8111156143a957600080fd5b6143b58782880161425a565b92505060606143c687828801614284565b91505092959194509250565b600080604083850312156143e557600080fd5b60006143f385828601614284565b925050602061440485828601614284565b9150509250929050565b61441781614b31565b82525050565b61442681614b43565b82525050565b61443581614b8c565b82525050565b600061444682614a8b565b6144508185614a96565b9350614460818560208601614bad565b61446981614cff565b840191505092915050565b6000614481600883614a96565b915061448c82614d10565b602082019050919050565b60006144a4602783614a96565b91506144af82614d39565b604082019050919050565b60006144c7602783614a96565b91506144d282614d88565b604082019050919050565b60006144ea602783614a96565b91506144f582614dd7565b604082019050919050565b600061450d601583614a96565b915061451882614e26565b602082019050919050565b6000614530602983614a96565b915061453b82614e4f565b604082019050919050565b6000614553602883614a96565b915061455e82614e9e565b604082019050919050565b6000614576602983614a96565b915061458182614eed565b604082019050919050565b6000614599601b83614a96565b91506145a482614f3c565b602082019050919050565b60006145bc601383614a96565b91506145c782614f65565b602082019050919050565b60006145df602a83614a96565b91506145ea82614f8e565b604082019050919050565b6000614602602983614a96565b915061460d82614fdd565b604082019050919050565b6000614625602a83614a96565b91506146308261502c565b604082019050919050565b61464481614b82565b82525050565b600060208201905061465f600083018461440e565b92915050565b600060208201905061467a600083018461441d565b92915050565b6000602082019050818103600083015261469981614474565b9050919050565b600060208201905081810360008301526146b981614497565b9050919050565b600060208201905081810360008301526146d9816144ba565b9050919050565b600060208201905081810360008301526146f9816144dd565b9050919050565b6000602082019050818103600083015261471981614500565b9050919050565b6000602082019050818103600083015261473981614523565b9050919050565b6000602082019050818103600083015261475981614546565b9050919050565b6000602082019050818103600083015261477981614569565b9050919050565b600060208201905081810360008301526147998161458c565b9050919050565b600060208201905081810360008301526147b9816145af565b9050919050565b600060208201905081810360008301526147d9816145d2565b9050919050565b600060208201905081810360008301526147f9816145f5565b9050919050565b6000602082019050818103600083015261481981614618565b9050919050565b6000602082019050614835600083018461463b565b92915050565b6000604082019050614850600083018561463b565b61485d602083018461463b565b9392505050565b600060e082019050614879600083018a61463b565b614886602083018961463b565b614893604083018861440e565b6148a0606083018761440e565b81810360808301526148b2818661443b565b90506148c160a083018561463b565b6148ce60c083018461463b565b98975050505050505050565b6000610160820190506148f0600083018e61463b565b6148fd602083018d61463b565b61490a604083018c61463b565b818103606083015261491c818b61443b565b905061492b608083018a61463b565b61493860a083018961463b565b61494560c083018861442c565b61495260e083018761440e565b61496061010083018661440e565b818103610120830152614973818561443b565b9050818103610140830152614988818461443b565b90509c9b505050505050505050505050565b6000610120820190506149b0600083018c61463b565b6149bd602083018b61463b565b6149ca604083018a61463b565b81810360608301526149dc818961443b565b90506149eb608083018861463b565b6149f860a083018761463b565b614a0560c083018661442c565b614a1260e083018561440e565b818103610100830152614a25818461443b565b90509a9950505050505050505050565b6000614a3f614a50565b9050614a4b8282614c12565b919050565b6000604051905090565b600067ffffffffffffffff821115614a7557614a74614cd0565b5b614a7e82614cff565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000614ab282614b82565b9150614abd83614b82565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614af257614af1614c43565b5b828201905092915050565b6000614b0882614b82565b9150614b1383614b82565b925082821015614b2657614b25614c43565b5b828203905092915050565b6000614b3c82614b62565b9050919050565b60008115159050919050565b6000819050614b5d8261507b565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000614b9782614b4f565b9050919050565b82818337600083830152505050565b60005b83811015614bcb578082015181840152602081019050614bb0565b83811115614bda576000848401525b50505050565b60006002820490506001821680614bf857607f821691505b60208210811415614c0c57614c0b614ca1565b5b50919050565b614c1b82614cff565b810181811067ffffffffffffffff82111715614c3a57614c39614cd0565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7265717569726521000000000000000000000000000000000000000000000000600082015250565b7f73686970706564427957686f6c6573616c657220537461746520646f65736e2760008201527f74206d6174636800000000000000000000000000000000000000000000000000602082015250565b7f666f7253616c65427957686f6c6573616c657220537461746520646f65736e2760008201527f74206d6174636800000000000000000000000000000000000000000000000000602082015250565b7f707572636861736564427952657461696c657220537461746520646f65736e2760008201527f74206d6174636800000000000000000000000000000000000000000000000000602082015250565b7f506179206973206e6f742073756666656369656e740000000000000000000000600082015250565b7f707572636861736564427957686f6c6573616c657220537461746520646f657360008201527f6e2774206d617463680000000000000000000000000000000000000000000000602082015250565b7f7265636569766564427957686f6c6573616c657220537461746520646f65736e60008201527f2774206d61746368000000000000000000000000000000000000000000000000602082015250565b7f7368697070656442794d616e75666163747572657220537461746520646f657360008201527f6e2774206d617463680000000000000000000000000000000000000000000000602082015250565b7f6f776e6572206164647265737320646f65736e2774206d617463680000000000600082015250565b7f6f776e657220646f65736e2774206d6174636800000000000000000000000000600082015250565b7f7061636b6167656442794d616e75666163747572657220537461746520646f6560008201527f736e2774206d6174636800000000000000000000000000000000000000000000602082015250565b7f666f7253616c6542794d616e75666163747572657220537461746520646f657360008201527f6e2774206d617463680000000000000000000000000000000000000000000000602082015250565b7f70726f647563656442794d616e75666163747572657220537461746520646f6560008201527f736e2774206d6174636800000000000000000000000000000000000000000000602082015250565b600a811061508c5761508b614c72565b5b50565b61509881614b31565b81146150a357600080fd5b50565b6150af81614b82565b81146150ba57600080fd5b5056fea26469706673582212206189f3ba9188b750eec326d8c62e1db6c748ab09f758bc09db971ac12785ab3764736f6c63430008020033";

    public static final String FUNC_ADDMANUFACTURER = "addManufacturer";

    public static final String FUNC_ADDRETAILER = "addRetailer";

    public static final String FUNC_ADDWHOLESALER = "addWholesaler";

    public static final String FUNC_ISMANUFACTURER = "isManufacturer";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_ISRETAILER = "isRetailer";

    public static final String FUNC_ISWHOLESALER = "isWholesaler";

    public static final String FUNC_OWNERLOOKUP = "ownerLookup";

    public static final String FUNC_RENOUNCEMANUFACTURER = "renounceManufacturer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCERETAILER = "renounceRetailer";

    public static final String FUNC_RENOUNCEWHOLESALER = "renounceWholesaler";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_PRODUCEITEMBYMANUFACTURER = "produceItemByManufacturer";

    public static final String FUNC_PACKAGEITEMBYMANUFACTURER = "packageItemByManufacturer";

    public static final String FUNC_SELLITEMBYMANUFACTURER = "sellItemByManufacturer";

    public static final String FUNC_PURCHASEITEMBYWHOLESALER = "purchaseItemByWholesaler";

    public static final String FUNC_SHIPPEDITEMBYMANUFACTURER = "shippedItemByManufacturer";

    public static final String FUNC_RECEIVEDITEMBYWHOLESALER = "receivedItemByWholesaler";

    public static final String FUNC_SELLITEMBYWHOLESALER = "sellItemByWholesaler";

    public static final String FUNC_PURCHASEITEMBYRETAILER = "purchaseItemByRetailer";

    public static final String FUNC_SHIPPEDITEMBYWHOLESALER = "shippedItemByWholesaler";

    public static final String FUNC_RECEIVEDITEMBYRETAILER = "receivedItemByRetailer";

    public static final String FUNC_FETCHITEMBUFFERONE = "fetchItemBufferOne";

    public static final String FUNC_FETCHITEMBUFFERTWO = "fetchItemBufferTwo";

    public static final String FUNC_FETCHWHOLESALER = "fetchWholesaler";

    public static final String FUNC_FETCHRETAILER = "fetchRetailer";

    public static final String FUNC_FETCHITEMHISTORY = "fetchitemHistory";

    public static final Event FORSALEBYMANUFACTURER_EVENT = new Event("ForSaleByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event FORSALEBYWHOLESALER_EVENT = new Event("ForSaleByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MANUFACTURERADDED_EVENT = new Event("ManufacturerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MANUFACTURERREMOVED_EVENT = new Event("ManufacturerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event PACKAGEDBYMANUFACTURER_EVENT = new Event("PackagedByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PRODUCEBYMANUFACTURER_EVENT = new Event("ProduceByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PURCHASEDBYRETAILER_EVENT = new Event("PurchasedByRetailer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PURCHASEDBYWHOLESALER_EVENT = new Event("PurchasedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDBYRETAILER_EVENT = new Event("ReceivedByRetailer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDBYWHOLESALER_EVENT = new Event("ReceivedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RETAILERADDED_EVENT = new Event("RetailerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RETAILERREMOVED_EVENT = new Event("RetailerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SHIPPEDBYMANUFACTURER_EVENT = new Event("ShippedByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SHIPPEDBYWHOLESALER_EVENT = new Event("ShippedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFEROWNERSHIP_EVENT = new Event("TransferOwnership", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WHOLESALERADDED_EVENT = new Event("WholesalerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WHOLESALERREMOVED_EVENT = new Event("WholesalerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
        _addresses.put("5777", "0x520200abe07c86E5204e7aC189794ca4E84457Fc");
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ForSaleByManufacturerEventResponse> getForSaleByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FORSALEBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ForSaleByManufacturerEventResponse> responses = new ArrayList<ForSaleByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ForSaleByManufacturerEventResponse typedResponse = new ForSaleByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ForSaleByManufacturerEventResponse> forSaleByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ForSaleByManufacturerEventResponse>() {
            @Override
            public ForSaleByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FORSALEBYMANUFACTURER_EVENT, log);
                ForSaleByManufacturerEventResponse typedResponse = new ForSaleByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ForSaleByManufacturerEventResponse> forSaleByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FORSALEBYMANUFACTURER_EVENT));
        return forSaleByManufacturerEventFlowable(filter);
    }

    public List<ForSaleByWholesalerEventResponse> getForSaleByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FORSALEBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ForSaleByWholesalerEventResponse> responses = new ArrayList<ForSaleByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ForSaleByWholesalerEventResponse typedResponse = new ForSaleByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ForSaleByWholesalerEventResponse> forSaleByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ForSaleByWholesalerEventResponse>() {
            @Override
            public ForSaleByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FORSALEBYWHOLESALER_EVENT, log);
                ForSaleByWholesalerEventResponse typedResponse = new ForSaleByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ForSaleByWholesalerEventResponse> forSaleByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FORSALEBYWHOLESALER_EVENT));
        return forSaleByWholesalerEventFlowable(filter);
    }

    public List<ManufacturerAddedEventResponse> getManufacturerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANUFACTURERADDED_EVENT, transactionReceipt);
        ArrayList<ManufacturerAddedEventResponse> responses = new ArrayList<ManufacturerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManufacturerAddedEventResponse typedResponse = new ManufacturerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ManufacturerAddedEventResponse> manufacturerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ManufacturerAddedEventResponse>() {
            @Override
            public ManufacturerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MANUFACTURERADDED_EVENT, log);
                ManufacturerAddedEventResponse typedResponse = new ManufacturerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ManufacturerAddedEventResponse> manufacturerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MANUFACTURERADDED_EVENT));
        return manufacturerAddedEventFlowable(filter);
    }

    public List<ManufacturerRemovedEventResponse> getManufacturerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANUFACTURERREMOVED_EVENT, transactionReceipt);
        ArrayList<ManufacturerRemovedEventResponse> responses = new ArrayList<ManufacturerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManufacturerRemovedEventResponse typedResponse = new ManufacturerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ManufacturerRemovedEventResponse> manufacturerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ManufacturerRemovedEventResponse>() {
            @Override
            public ManufacturerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MANUFACTURERREMOVED_EVENT, log);
                ManufacturerRemovedEventResponse typedResponse = new ManufacturerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ManufacturerRemovedEventResponse> manufacturerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MANUFACTURERREMOVED_EVENT));
        return manufacturerRemovedEventFlowable(filter);
    }

    public List<PackagedByManufacturerEventResponse> getPackagedByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PACKAGEDBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<PackagedByManufacturerEventResponse> responses = new ArrayList<PackagedByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PackagedByManufacturerEventResponse typedResponse = new PackagedByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PackagedByManufacturerEventResponse> packagedByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PackagedByManufacturerEventResponse>() {
            @Override
            public PackagedByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PACKAGEDBYMANUFACTURER_EVENT, log);
                PackagedByManufacturerEventResponse typedResponse = new PackagedByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PackagedByManufacturerEventResponse> packagedByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PACKAGEDBYMANUFACTURER_EVENT));
        return packagedByManufacturerEventFlowable(filter);
    }

    public List<ProduceByManufacturerEventResponse> getProduceByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCEBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ProduceByManufacturerEventResponse> responses = new ArrayList<ProduceByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProduceByManufacturerEventResponse typedResponse = new ProduceByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProduceByManufacturerEventResponse> produceByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProduceByManufacturerEventResponse>() {
            @Override
            public ProduceByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PRODUCEBYMANUFACTURER_EVENT, log);
                ProduceByManufacturerEventResponse typedResponse = new ProduceByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProduceByManufacturerEventResponse> produceByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRODUCEBYMANUFACTURER_EVENT));
        return produceByManufacturerEventFlowable(filter);
    }

    public List<PurchasedByRetailerEventResponse> getPurchasedByRetailerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASEDBYRETAILER_EVENT, transactionReceipt);
        ArrayList<PurchasedByRetailerEventResponse> responses = new ArrayList<PurchasedByRetailerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchasedByRetailerEventResponse typedResponse = new PurchasedByRetailerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchasedByRetailerEventResponse> purchasedByRetailerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchasedByRetailerEventResponse>() {
            @Override
            public PurchasedByRetailerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASEDBYRETAILER_EVENT, log);
                PurchasedByRetailerEventResponse typedResponse = new PurchasedByRetailerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchasedByRetailerEventResponse> purchasedByRetailerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASEDBYRETAILER_EVENT));
        return purchasedByRetailerEventFlowable(filter);
    }

    public List<PurchasedByWholesalerEventResponse> getPurchasedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<PurchasedByWholesalerEventResponse> responses = new ArrayList<PurchasedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchasedByWholesalerEventResponse typedResponse = new PurchasedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchasedByWholesalerEventResponse> purchasedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchasedByWholesalerEventResponse>() {
            @Override
            public PurchasedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASEDBYWHOLESALER_EVENT, log);
                PurchasedByWholesalerEventResponse typedResponse = new PurchasedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchasedByWholesalerEventResponse> purchasedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASEDBYWHOLESALER_EVENT));
        return purchasedByWholesalerEventFlowable(filter);
    }

    public List<ReceivedByRetailerEventResponse> getReceivedByRetailerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDBYRETAILER_EVENT, transactionReceipt);
        ArrayList<ReceivedByRetailerEventResponse> responses = new ArrayList<ReceivedByRetailerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedByRetailerEventResponse typedResponse = new ReceivedByRetailerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedByRetailerEventResponse> receivedByRetailerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceivedByRetailerEventResponse>() {
            @Override
            public ReceivedByRetailerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDBYRETAILER_EVENT, log);
                ReceivedByRetailerEventResponse typedResponse = new ReceivedByRetailerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedByRetailerEventResponse> receivedByRetailerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDBYRETAILER_EVENT));
        return receivedByRetailerEventFlowable(filter);
    }

    public List<ReceivedByWholesalerEventResponse> getReceivedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ReceivedByWholesalerEventResponse> responses = new ArrayList<ReceivedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedByWholesalerEventResponse typedResponse = new ReceivedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedByWholesalerEventResponse> receivedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceivedByWholesalerEventResponse>() {
            @Override
            public ReceivedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDBYWHOLESALER_EVENT, log);
                ReceivedByWholesalerEventResponse typedResponse = new ReceivedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedByWholesalerEventResponse> receivedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDBYWHOLESALER_EVENT));
        return receivedByWholesalerEventFlowable(filter);
    }

    public List<RetailerAddedEventResponse> getRetailerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERADDED_EVENT, transactionReceipt);
        ArrayList<RetailerAddedEventResponse> responses = new ArrayList<RetailerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerAddedEventResponse typedResponse = new RetailerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailerAddedEventResponse> retailerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RetailerAddedEventResponse>() {
            @Override
            public RetailerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILERADDED_EVENT, log);
                RetailerAddedEventResponse typedResponse = new RetailerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailerAddedEventResponse> retailerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILERADDED_EVENT));
        return retailerAddedEventFlowable(filter);
    }

    public List<RetailerRemovedEventResponse> getRetailerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERREMOVED_EVENT, transactionReceipt);
        ArrayList<RetailerRemovedEventResponse> responses = new ArrayList<RetailerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerRemovedEventResponse typedResponse = new RetailerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailerRemovedEventResponse> retailerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RetailerRemovedEventResponse>() {
            @Override
            public RetailerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILERREMOVED_EVENT, log);
                RetailerRemovedEventResponse typedResponse = new RetailerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailerRemovedEventResponse> retailerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILERREMOVED_EVENT));
        return retailerRemovedEventFlowable(filter);
    }

    public List<ShippedByManufacturerEventResponse> getShippedByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHIPPEDBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ShippedByManufacturerEventResponse> responses = new ArrayList<ShippedByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShippedByManufacturerEventResponse typedResponse = new ShippedByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ShippedByManufacturerEventResponse> shippedByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ShippedByManufacturerEventResponse>() {
            @Override
            public ShippedByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SHIPPEDBYMANUFACTURER_EVENT, log);
                ShippedByManufacturerEventResponse typedResponse = new ShippedByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ShippedByManufacturerEventResponse> shippedByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SHIPPEDBYMANUFACTURER_EVENT));
        return shippedByManufacturerEventFlowable(filter);
    }

    public List<ShippedByWholesalerEventResponse> getShippedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHIPPEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ShippedByWholesalerEventResponse> responses = new ArrayList<ShippedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShippedByWholesalerEventResponse typedResponse = new ShippedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ShippedByWholesalerEventResponse> shippedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ShippedByWholesalerEventResponse>() {
            @Override
            public ShippedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SHIPPEDBYWHOLESALER_EVENT, log);
                ShippedByWholesalerEventResponse typedResponse = new ShippedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ShippedByWholesalerEventResponse> shippedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SHIPPEDBYWHOLESALER_EVENT));
        return shippedByWholesalerEventFlowable(filter);
    }

    public List<TransferOwnershipEventResponse> getTransferOwnershipEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEROWNERSHIP_EVENT, transactionReceipt);
        ArrayList<TransferOwnershipEventResponse> responses = new ArrayList<TransferOwnershipEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferOwnershipEventResponse typedResponse = new TransferOwnershipEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferOwnershipEventResponse> transferOwnershipEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferOwnershipEventResponse>() {
            @Override
            public TransferOwnershipEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFEROWNERSHIP_EVENT, log);
                TransferOwnershipEventResponse typedResponse = new TransferOwnershipEventResponse();
                typedResponse.log = log;
                typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferOwnershipEventResponse> transferOwnershipEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFEROWNERSHIP_EVENT));
        return transferOwnershipEventFlowable(filter);
    }

    public List<WholesalerAddedEventResponse> getWholesalerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WHOLESALERADDED_EVENT, transactionReceipt);
        ArrayList<WholesalerAddedEventResponse> responses = new ArrayList<WholesalerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WholesalerAddedEventResponse typedResponse = new WholesalerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WholesalerAddedEventResponse> wholesalerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WholesalerAddedEventResponse>() {
            @Override
            public WholesalerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WHOLESALERADDED_EVENT, log);
                WholesalerAddedEventResponse typedResponse = new WholesalerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WholesalerAddedEventResponse> wholesalerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WHOLESALERADDED_EVENT));
        return wholesalerAddedEventFlowable(filter);
    }

    public List<WholesalerRemovedEventResponse> getWholesalerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WHOLESALERREMOVED_EVENT, transactionReceipt);
        ArrayList<WholesalerRemovedEventResponse> responses = new ArrayList<WholesalerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WholesalerRemovedEventResponse typedResponse = new WholesalerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WholesalerRemovedEventResponse> wholesalerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WholesalerRemovedEventResponse>() {
            @Override
            public WholesalerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WHOLESALERREMOVED_EVENT, log);
                WholesalerRemovedEventResponse typedResponse = new WholesalerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WholesalerRemovedEventResponse> wholesalerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WHOLESALERREMOVED_EVENT));
        return wholesalerRemovedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addManufacturer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRetailer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addWholesaler(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isManufacturer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isRetailer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWholesaler(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> ownerLookup() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERLOOKUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceManufacturer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEMANUFACTURER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRetailer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCERETAILER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceWholesaler() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEWHOLESALER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> kill() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> produceItemByManufacturer(BigInteger _upc, String _originManufacturerName, String _productNotes, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PRODUCEITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_originManufacturerName), 
                new org.web3j.abi.datatypes.Utf8String(_productNotes), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> packageItemByManufacturer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PACKAGEITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sellItemByManufacturer(BigInteger _upc, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseItemByWholesaler(BigInteger _upc, String _wholesalerName, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PURCHASEITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_wholesalerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> shippedItemByManufacturer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SHIPPEDITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receivedItemByWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEDITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sellItemByWholesaler(BigInteger _upc, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseItemByRetailer(BigInteger _upc, String _retailerName, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PURCHASEITEMBYRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_retailerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> shippedItemByWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SHIPPEDITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receivedItemByRetailer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEDITEMBYRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>> fetchItemBufferOne(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMBUFFERONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>> fetchItemBufferTwo(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMBUFFERTWO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>>(function,
                new Callable<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>>() {
                    @Override
                    public Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (String) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>> fetchWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>> fetchRetailer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> fetchitemHistory(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ForSaleByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ForSaleByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ManufacturerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ManufacturerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class PackagedByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ProduceByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class PurchasedByRetailerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class PurchasedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ReceivedByRetailerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ReceivedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class RetailerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RetailerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ShippedByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ShippedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class TransferOwnershipEventResponse extends BaseEventResponse {
        public String oldOwner;

        public String newOwner;
    }

    public static class WholesalerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WholesalerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }
}
