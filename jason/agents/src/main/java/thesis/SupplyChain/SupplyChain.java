package thesis.SupplyChain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tuples.generated.Tuple9;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class SupplyChain extends Contract {
    public static final String BINARY = "0x6080604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a3620000d1336200014a60201b60201c565b620000e233620001ab60201b60201c565b620000f3336200020c60201b60201c565b33600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016006819055506001600581905550620003b6565b620001658160016200026d60201b620046791790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f561138658ca49a8540dc70dcfe64c9026c1c5b9344642242dd6562970f9c127860405160405180910390a250565b620001c68160026200026d60201b620046791790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167fd8a7ad7929975a375d2b12bf49040286b5b105df0fe351f10df6d85e5b7142f760405160405180910390a250565b620002278160036200026d60201b620046791790919060201c565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415620002a857600080fd5b620002ba82826200032360201b60201c565b15620002c557600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156200035f57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b614b8980620003c66000396000f3fe6080604052600436106101c25760003560e01c806377c45913116100f7578063db0e6a2f11610095578063dfe4fa7611610064578063dfe4fa7614610f28578063e02e64ea14610fed578063f2fde38b14611044578063fe19d15214611095576101c2565b8063db0e6a2f14610e64578063dd58903014610e7b578063de07f34e14610ec0578063de63bdb914610ed7576101c2565b80638ec4f505116100d15780638ec4f50514610d7b5780638f32d59b14610dcc578063b9a40d0414610dfb578063cbb34d4f14610e29576101c2565b806377c4591314610b3b57806377f3312b14610c715780637cba6e2114610cb6576101c2565b80635399955d1161016457806364d1ba1f1161013e57806364d1ba1f1461070657806366225ff91461076f578063714b41f314610999578063715018a614610b24576101c2565b80635399955d146104d95780635da09b881461064c5780635f8a5afa146106b5576101c2565b80631e968862116101a05780631e968862146102c157806337b2f92c1461044c5780633b3063691461048757806341c0e1b5146104c2576101c2565b80630596dc29146101c75780631154501c1461020257806317d4a49114610258575b600080fd5b3480156101d357600080fd5b50610200600480360360208110156101ea57600080fd5b81019080803590602001909291905050506110ac565b005b34801561020e57600080fd5b5061023b6004803603602081101561022557600080fd5b810190808035906020019092919050505061129d565b604051808381526020018281526020019250505060405180910390f35b34801561026457600080fd5b506102a76004803603602081101561027b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112f0565b604051808215151515815260200191505060405180910390f35b3480156102cd57600080fd5b506102fa600480360360208110156102e457600080fd5b810190808035906020019092919050505061130d565b604051808a81526020018981526020018881526020018060200187815260200186815260200185600981111561032c57fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838103835289818151815260200191508051906020019080838360005b838110156103a2578082015181840152602081019050610387565b50505050905090810190601f1680156103cf5780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156104085780820151818401526020810190506103ed565b50505050905090810190601f1680156104355780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561045857600080fd5b506104856004803603602081101561046f57600080fd5b81019080803590602001909291905050506117e5565b005b34801561049357600080fd5b506104c0600480360360208110156104aa57600080fd5b81019080803590602001909291905050506119d6565b005b3480156104ce57600080fd5b506104d7611bc7565b005b3480156104e557600080fd5b5061064a600480360360808110156104fc57600080fd5b81019080803590602001909291908035906020019064010000000081111561052357600080fd5b82018360208201111561053557600080fd5b8035906020019184600183028401116401000000008311171561055757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001906401000000008111156105ba57600080fd5b8201836020820111156105cc57600080fd5b803590602001918460018302840111640100000000831117156105ee57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050611c67565b005b34801561065857600080fd5b5061069b6004803603602081101561066f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612109565b604051808215151515815260200191505060405180910390f35b3480156106c157600080fd5b50610704600480360360208110156106d857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612126565b005b34801561071257600080fd5b506107556004803603602081101561072957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612144565b604051808215151515815260200191505060405180910390f35b34801561077b57600080fd5b506107a86004803603602081101561079257600080fd5b8101908080359060200190929190505050612161565b604051808c81526020018b81526020018a8152602001806020018981526020018881526020018760098111156107da57fe5b60ff1681526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001806020018060200184810384528c818151815260200191508051906020019080838360005b8381101561088657808201518184015260208101905061086b565b50505050905090810190601f1680156108b35780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b838110156108ec5780820151818401526020810190506108d1565b50505050905090810190601f1680156109195780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b83811015610952578082015181840152602081019050610937565b50505050905090810190601f16801561097f5780820380516001836020036101000a031916815260200191505b509e50505050505050505050505050505060405180910390f35b3480156109a557600080fd5b506109d2600480360360208110156109bc57600080fd5b8101908080359060200190929190505050612651565b604051808a815260200189815260200188815260200180602001878152602001868152602001856009811115610a0457fe5b60ff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001838103835289818151815260200191508051906020019080838360005b83811015610a7a578082015181840152602081019050610a5f565b50505050905090810190601f168015610aa75780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015610ae0578082015181840152602081019050610ac5565b50505050905090810190601f168015610b0d5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b348015610b3057600080fd5b50610b39612b29565b005b348015610b4757600080fd5b50610b7460048036036020811015610b5e57600080fd5b8101908080359060200190929190505050612cab565b604051808881526020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610c30578082015181840152602081019050610c15565b50505050905090810190601f168015610c5d5780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b348015610c7d57600080fd5b50610cb460048036036040811015610c9457600080fd5b810190808035906020019092919080359060200190929190505050613169565b005b610d7960048036036040811015610ccc57600080fd5b810190808035906020019092919080359060200190640100000000811115610cf357600080fd5b820183602082011115610d0557600080fd5b80359060200191846001830284011164010000000083111715610d2757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613376565b005b348015610d8757600080fd5b50610dca60048036036020811015610d9e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061371c565b005b348015610dd857600080fd5b50610de161373a565b604051808215151515815260200191505060405180910390f35b610e2760048036036020811015610e1157600080fd5b8101908080359060200190929190505050613791565b005b348015610e3557600080fd5b50610e6260048036036020811015610e4c57600080fd5b8101908080359060200190929190505050613982565b005b348015610e7057600080fd5b50610e79613b73565b005b348015610e8757600080fd5b50610ebe60048036036040811015610e9e57600080fd5b810190808035906020019092919080359060200190929190505050613b7e565b005b348015610ecc57600080fd5b50610ed5613d8d565b005b348015610ee357600080fd5b50610f2660048036036020811015610efa57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050613d98565b005b610feb60048036036040811015610f3e57600080fd5b810190808035906020019092919080359060200190640100000000811115610f6557600080fd5b820183602082011115610f7757600080fd5b80359060200191846001830284011164010000000083111715610f9957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050613db6565b005b348015610ff957600080fd5b5061100261415d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561105057600080fd5b506110936004803603602081101561106757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050614186565b005b3480156110a157600080fd5b506110aa614255565b005b6110b533612144565b6110be57600080fd5b80600460098111156110cc57fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156110fb57fe5b14611151576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614aaf6029913960400191505060405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600560076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561125c57fe5b02179055507fee82be1f7a6bfb16a15acf8ecbb38327cf93ef35166206492b476fb143be5a2d836040518082815260200191505060405180910390a1505050565b6000806112a86147d0565b60086000858152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806000015181602001519250925050915091565b600061130682600161426090919063ffffffff16565b9050919050565b6000806000606060008060008060606113246147ea565b600760008c8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561149c5780601f106114715761010080835404028352916020019161149c565b820191906000526020600020905b81548152906001019060200180831161147f57829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115485780601f1061151d57610100808354040283529160200191611548565b820191906000526020600020905b81548152906001019060200180831161152b57829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff16600981111561158d57fe5b600981111561159857fe5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561168b5780601f106116605761010080835404028352916020019161168b565b820191906000526020600020905b81548152906001019060200180831161166e57829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156117835780601f1061175857610100808354040283529160200191611783565b820191906000526020600020905b81548152906001019060200180831161176657829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101600151886101800151859550809050995099509950995099509950995099509950509193959799909294969850565b6117ee33612109565b6117f757600080fd5b806008600981111561180557fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff16600981111561183457fe5b1461188a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260278152602001806149e96027913960400191505060405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600960076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561199557fe5b02179055507f322f34e90f2269750b3e28178631d975cc678db36f21098fe548b7f755ce0bd0836040518082815260200191505060405180910390a1505050565b6119df33612144565b6119e857600080fd5b80600760098111156119f657fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115611a2557fe5b14611a7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180614a376027913960400191505060405180910390fd5b60076000838152602001908152602001600020600a0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600860076000858152602001908152602001600020600a0160006101000a81548160ff02191690836009811115611b8657fe5b02179055507f7287d6f591ede70e386683b60c018672ab3236da1d7449a774f2f999329bd393836040518082815260200191505060405180910390a1505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611c65576000611c4a600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166142f2565b90508073ffffffffffffffffffffffffffffffffffffffff16ff5b565b611c70336112f0565b611c7957600080fd5b600080611c846147ea565b6006548160000181815250508681602001818152505033816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505033816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816080018190525060065487018160a0018181525050848160c001819052508381610100018181525050428160e001818152505060008161012001818152505060008161014001906009811115611d5e57fe5b90816009811115611d6b57fe5b815250508281610160019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506040518060400160405280600481526020017f4d722e580000000000000000000000000000000000000000000000000000000081525081610180018190525081816101a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506040518060400160405280600481526020017f4d722e5900000000000000000000000000000000000000000000000000000000815250816101c001819052508060076000898152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506080820151816004019080519060200190611f319291906148c3565b5060a0820151816005015560c0820151816006019080519060200190611f589291906148c3565b5060e082015181600701556101008201518160080155610120820151816009015561014082015181600a0160006101000a81548160ff02191690836009811115611f9e57fe5b021790555061016082015181600a0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061018082015181600b0190805190602001906120089291906148c3565b506101a082015181600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506101c082015181600d01908051906020019061206e9291906148c3565b50905050600061207c6147d0565b818160000181815250508181602001818152505080600860008b815260200190815260200160002060008201518160000155602082015181600101559050506001600654016006819055507f450f0ca4d112999acf0af70e42b45b5e285434a386833a43e0cc3ce5279cfd0a896040518082815260200191505060405180910390a1505050505050505050565b600061211f82600361426090919063ffffffff16565b9050919050565b61212f336112f0565b61213857600080fd5b612141816142fc565b50565b600061215a82600261426090919063ffffffff16565b9050919050565b60008060006060600080600080600060608061217b6147ea565b600760008e8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122f35780601f106122c8576101008083540402835291602001916122f3565b820191906000526020600020905b8154815290600101906020018083116122d657829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561239f5780601f106123745761010080835404028352916020019161239f565b820191906000526020600020905b81548152906001019060200180831161238257829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff1660098111156123e457fe5b60098111156123ef57fe5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156124e25780601f106124b7576101008083540402835291602001916124e2565b820191906000526020600020905b8154815290600101906020018083116124c557829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125da5780601f106125af576101008083540402835291602001916125da565b820191906000526020600020905b8154815290600101906020018083116125bd57829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101600151886101a001518961018001518a6101c001518797508191508090509b509b509b509b509b509b509b509b509b509b509b505091939597999b90929496989a50565b6000806000606060008060008060606126686147ea565b600760008c8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156127e05780601f106127b5576101008083540402835291602001916127e0565b820191906000526020600020905b8154815290600101906020018083116127c357829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561288c5780601f106128615761010080835404028352916020019161288c565b820191906000526020600020905b81548152906001019060200180831161286f57829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff1660098111156128d157fe5b60098111156128dc57fe5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129cf5780601f106129a4576101008083540402835291602001916129cf565b820191906000526020600020905b8154815290600101906020018083116129b257829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ac75780601f10612a9c57610100808354040283529160200191612ac7565b820191906000526020600020905b815481529060010190602001808311612aaa57829003601f168201915b5050505050815250509050806000015181602001518260a001518360c001518461010001518560e00151866101400151876101a00151886101c00151859550809050995099509950995099509950995099509950509193959799909294969850565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612bec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6f776e657220646f65736e2774206d617463680000000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000806000806060600080612cbe6147ea565b600760008a8152602001908152602001600020604051806101e001604052908160008201548152602001600182015481526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600482018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e365780601f10612e0b57610100808354040283529160200191612e36565b820191906000526020600020905b815481529060010190602001808311612e1957829003601f168201915b5050505050815260200160058201548152602001600682018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ee25780601f10612eb757610100808354040283529160200191612ee2565b820191906000526020600020905b815481529060010190602001808311612ec557829003601f168201915b50505050508152602001600782015481526020016008820154815260200160098201548152602001600a820160009054906101000a900460ff166009811115612f2757fe5b6009811115612f3257fe5b8152602001600a820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600b82018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156130255780601f10612ffa57610100808354040283529160200191613025565b820191906000526020600020905b81548152906001019060200180831161300857829003601f168201915b50505050508152602001600c820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600d82018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561311d5780601f106130f25761010080835404028352916020019161311d565b820191906000526020600020905b81548152906001019060200180831161310057829003601f168201915b5050505050815250509050806000015181602001518260400151836060015184608001518560e00151866101200151829250975097509750975097509750975050919395979092949650565b613172336112f0565b61317b57600080fd5b816001600981111561318957fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156131b857fe5b1461320e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614ad8602a913960400191505060405180910390fd5b6007600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146132e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600260076000868152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561331957fe5b02179055508260076000868152602001908152602001600020600801819055507faec623c8803eb3c795344cb3d2178da45139e85d984a1dc348cf9dc8bd7ff160846040518082815260200191505060405180910390a150505050565b61337f33612109565b61338857600080fd5b816006600981111561339657fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156133c557fe5b1461341b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526027815260200180614a106027913960400191505060405180910390fd5b6007600084815260200190815260200160002060080154803410156134a8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f506179206973206e6f742073756666656369656e74000000000000000000000081525060200191505060405180910390fd5b8333600060076000848152602001908152602001600020600801549050600081340390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613512573d6000803e3d6000fd5b506000613554600760008b8152602001908152602001600020600a0160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166142f2565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600760008c8152602001908152602001600020600801549081150290604051600060405180830381858888f193505050501580156135b2573d6000803e3d6000fd5b5033600760008b815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008b8152602001908152602001600020600c0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600760008b8152602001908152602001600020600d019080519060200190613687929190614943565b5060078060008b8152602001908152602001600020600a0160006101000a81548160ff021916908360098111156136ba57fe5b021790555043600860008b8152602001908152602001600020600101819055507faa7352d10146444c3afd9bd7fb0ae56b0a85e81139536bbec3f1f660fddd7be1896040518082815260200191505060405180910390a1505050505050505050565b61372533612109565b61372e57600080fd5b61373781614356565b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b61379a336112f0565b6137a357600080fd5b80600360098111156137b157fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156137e057fe5b14613836576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614a5e6029913960400191505060405180910390fd5b6007600083815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461390e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600460076000858152602001908152602001600020600a0160006101000a81548160ff0219169083600981111561394157fe5b02179055507f25727bef8a186dd95a062151451f2d651551b53124c18208d7653b1217ae31ba836040518082815260200191505060405180910390a1505050565b61398b336112f0565b61399457600080fd5b80600060098111156139a257fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff1660098111156139d157fe5b14613a27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614b2b602a913960400191505060405180910390fd5b6007600083815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613aff576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600160076000858152602001908152602001600020600a0160006101000a81548160ff02191690836009811115613b3257fe5b02179055507fd387ba7c66ff37ae33b5cbb19fe94bcbfe666ea31635889fba1abc7198c2f1bd836040518082815260200191505060405180910390a1505050565b613b7c336143b0565b565b613b8733612144565b613b9057600080fd5b8160056009811115613b9e57fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115613bcd57fe5b14613c23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614a876028913960400191505060405180910390fd5b6007600084815260200190815260200160002060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614613cfb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f776e6572206164647265737320646f65736e2774206d61746368000000000081525060200191505060405180910390fd5b600660076000868152602001908152602001600020600a0160006101000a81548160ff02191690836009811115613d2e57fe5b02179055508260076000868152602001908152602001600020600801819055507f86c3594f216ced937eb7fdc5b2c3e64fb4ae2badf95562d2db7d99f58c6e56d66005546040518082815260200191505060405180910390a150505050565b613d963361440a565b565b613da133612144565b613daa57600080fd5b613db381614464565b50565b613dbf33612144565b613dc857600080fd5b8160026009811115613dd657fe5b60076000838152602001908152602001600020600a0160009054906101000a900460ff166009811115613e0557fe5b14613e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614b026029913960400191505060405180910390fd5b600760008481526020019081526020016000206008015480341015613ee8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f506179206973206e6f742073756666656369656e74000000000000000000000081525060200191505060405180910390fd5b8333600060076000848152602001908152602001600020600801549050600081340390508273ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015613f52573d6000803e3d6000fd5b506000613f94600760008b815260200190815260200160002060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166142f2565b90508073ffffffffffffffffffffffffffffffffffffffff166108fc600760008c8152602001908152602001600020600801549081150290604051600060405180830381858888f19350505050158015613ff2573d6000803e3d6000fd5b5033600760008b815260200190815260200160002060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600760008b8152602001908152602001600020600a0160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087600760008b8152602001908152602001600020600b0190805190602001906140c7929190614943565b506003600760008b8152602001908152602001600020600a0160006101000a81548160ff021916908360098111156140fb57fe5b021790555043600860008b8152602001908152602001600020600001819055507f0b2ad8447953e780f58d2343ea44f2be15d412dc219f1ca265728cdc5cac9b66896040518082815260200191505060405180910390a1505050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614614249576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f6f776e657220646f65736e2774206d617463680000000000000000000000000081525060200191505060405180910390fd5b614252816144be565b50565b61425e3361461f565b565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561429b57600080fd5b8260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000819050919050565b61431081600161467990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f561138658ca49a8540dc70dcfe64c9026c1c5b9344642242dd6562970f9c127860405160405180910390a250565b61436a81600361467990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f71ae26cad02663e3d92efd6ec56031a80d74a20c0ab4183faa8bf262261c9baa60405160405180910390a250565b6143c481600361472590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fdb7176e79cffef81cb01767dd0447a0b24bb72ca9778d4b245581086b2a7e6db60405160405180910390a250565b61441e81600161472590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f2fed5abf6a80d6dfe30b4895481b2fc5d7dce5f8f7b931832f4a2947d5040c7f60405160405180910390a250565b61447881600261467990919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167fd8a7ad7929975a375d2b12bf49040286b5b105df0fe351f10df6d85e5b7142f760405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415614561576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260088152602001807f726571756972652100000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5c486528ec3e3f0ea91181cff8116f02bfa350e03b8b6f12e00765adbb5af85c60405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61463381600261472590919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff167f7f865f710a7604537eb2bc0334f082fa642d210a705398937f53663384485b2860405160405180910390a250565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156146b357600080fd5b6146bd8282614260565b156146c757600080fd5b60018260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561475f57600080fd5b6147698282614260565b61477257600080fd5b60008260000160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b604051806040016040528060008152602001600081525090565b604051806101e001604052806000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016060815260200160008152602001606081526020016000815260200160008152602001600081526020016000600981111561487557fe5b8152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061490457805160ff1916838001178555614932565b82800160010185558215614932579182015b82811115614931578251825591602001919060010190614916565b5b50905061493f91906149c3565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061498457805160ff19168380011785556149b2565b828001600101855582156149b2579182015b828111156149b1578251825591602001919060010190614996565b5b5090506149bf91906149c3565b5090565b6149e591905b808211156149e15760008160009055506001016149c9565b5090565b9056fe73686970706564427957686f6c6573616c657220537461746520646f65736e2774206d61746368666f7253616c65427957686f6c6573616c657220537461746520646f65736e2774206d61746368707572636861736564427952657461696c657220537461746520646f65736e2774206d61746368707572636861736564427957686f6c6573616c657220537461746520646f65736e2774206d617463687265636569766564427957686f6c6573616c657220537461746520646f65736e2774206d617463687368697070656442794d616e75666163747572657220537461746520646f65736e2774206d617463687061636b6167656442794d616e75666163747572657220537461746520646f65736e2774206d61746368666f7253616c6542794d616e75666163747572657220537461746520646f65736e2774206d6174636870726f647563656442794d616e75666163747572657220537461746520646f65736e2774206d61746368a265627a7a7231582003a21c019b3fe38371293aef6e1f1dbdb42a8ef4aa8ce83c001c34827fa670fc64736f6c63430005100032";

    public static final String FUNC_ADDMANUFACTURER = "addManufacturer";

    public static final String FUNC_ADDRETAILER = "addRetailer";

    public static final String FUNC_ADDWHOLESALER = "addWholesaler";

    public static final String FUNC_ISMANUFACTURER = "isManufacturer";

    public static final String FUNC_ISOWNER = "isOwner";

    public static final String FUNC_ISRETAILER = "isRetailer";

    public static final String FUNC_ISWHOLESALER = "isWholesaler";

    public static final String FUNC_OWNERLOOKUP = "ownerLookup";

    public static final String FUNC_RENOUNCEMANUFACTURER = "renounceManufacturer";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_RENOUNCERETAILER = "renounceRetailer";

    public static final String FUNC_RENOUNCEWHOLESALER = "renounceWholesaler";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_KILL = "kill";

    public static final String FUNC_PRODUCEITEMBYMANUFACTURER = "produceItemByManufacturer";

    public static final String FUNC_PACKAGEITEMBYMANUFACTURER = "packageItemByManufacturer";

    public static final String FUNC_SELLITEMBYMANUFACTURER = "sellItemByManufacturer";

    public static final String FUNC_PURCHASEITEMBYWHOLESALER = "purchaseItemByWholesaler";

    public static final String FUNC_SHIPPEDITEMBYMANUFACTURER = "shippedItemByManufacturer";

    public static final String FUNC_RECEIVEDITEMBYWHOLESALER = "receivedItemByWholesaler";

    public static final String FUNC_SELLITEMBYWHOLESALER = "sellItemByWholesaler";

    public static final String FUNC_PURCHASEITEMBYRETAILER = "purchaseItemByRetailer";

    public static final String FUNC_SHIPPEDITEMBYWHOLESALER = "shippedItemByWholesaler";

    public static final String FUNC_RECEIVEDITEMBYRETAILER = "receivedItemByRetailer";

    public static final String FUNC_FETCHITEMBUFFERONE = "fetchItemBufferOne";

    public static final String FUNC_FETCHITEMBUFFERTWO = "fetchItemBufferTwo";

    public static final String FUNC_FETCHWHOLESALER = "fetchWholesaler";

    public static final String FUNC_FETCHRETAILER = "fetchRetailer";

    public static final String FUNC_FETCHITEMHISTORY = "fetchitemHistory";

    public static final Event FORSALEBYMANUFACTURER_EVENT = new Event("ForSaleByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event FORSALEBYWHOLESALER_EVENT = new Event("ForSaleByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event MANUFACTURERADDED_EVENT = new Event("ManufacturerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event MANUFACTURERREMOVED_EVENT = new Event("ManufacturerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event PACKAGEDBYMANUFACTURER_EVENT = new Event("PackagedByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PRODUCEBYMANUFACTURER_EVENT = new Event("ProduceByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PURCHASEDBYRETAILER_EVENT = new Event("PurchasedByRetailer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event PURCHASEDBYWHOLESALER_EVENT = new Event("PurchasedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDBYRETAILER_EVENT = new Event("ReceivedByRetailer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RECEIVEDBYWHOLESALER_EVENT = new Event("ReceivedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event RETAILERADDED_EVENT = new Event("RetailerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event RETAILERREMOVED_EVENT = new Event("RetailerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event SHIPPEDBYMANUFACTURER_EVENT = new Event("ShippedByManufacturer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SHIPPEDBYWHOLESALER_EVENT = new Event("ShippedByWholesaler", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event TRANSFEROWNERSHIP_EVENT = new Event("TransferOwnership", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WHOLESALERADDED_EVENT = new Event("WholesalerAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event WHOLESALERREMOVED_EVENT = new Event("WholesalerRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    protected static final HashMap<String, String> _addresses;

    static {
        _addresses = new HashMap<String, String>();
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected SupplyChain(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<ForSaleByManufacturerEventResponse> getForSaleByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FORSALEBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ForSaleByManufacturerEventResponse> responses = new ArrayList<ForSaleByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ForSaleByManufacturerEventResponse typedResponse = new ForSaleByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ForSaleByManufacturerEventResponse> forSaleByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ForSaleByManufacturerEventResponse>() {
            @Override
            public ForSaleByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FORSALEBYMANUFACTURER_EVENT, log);
                ForSaleByManufacturerEventResponse typedResponse = new ForSaleByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ForSaleByManufacturerEventResponse> forSaleByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FORSALEBYMANUFACTURER_EVENT));
        return forSaleByManufacturerEventFlowable(filter);
    }

    public List<ForSaleByWholesalerEventResponse> getForSaleByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FORSALEBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ForSaleByWholesalerEventResponse> responses = new ArrayList<ForSaleByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ForSaleByWholesalerEventResponse typedResponse = new ForSaleByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ForSaleByWholesalerEventResponse> forSaleByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ForSaleByWholesalerEventResponse>() {
            @Override
            public ForSaleByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FORSALEBYWHOLESALER_EVENT, log);
                ForSaleByWholesalerEventResponse typedResponse = new ForSaleByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ForSaleByWholesalerEventResponse> forSaleByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FORSALEBYWHOLESALER_EVENT));
        return forSaleByWholesalerEventFlowable(filter);
    }

    public List<ManufacturerAddedEventResponse> getManufacturerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANUFACTURERADDED_EVENT, transactionReceipt);
        ArrayList<ManufacturerAddedEventResponse> responses = new ArrayList<ManufacturerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManufacturerAddedEventResponse typedResponse = new ManufacturerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ManufacturerAddedEventResponse> manufacturerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ManufacturerAddedEventResponse>() {
            @Override
            public ManufacturerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MANUFACTURERADDED_EVENT, log);
                ManufacturerAddedEventResponse typedResponse = new ManufacturerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ManufacturerAddedEventResponse> manufacturerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MANUFACTURERADDED_EVENT));
        return manufacturerAddedEventFlowable(filter);
    }

    public List<ManufacturerRemovedEventResponse> getManufacturerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANUFACTURERREMOVED_EVENT, transactionReceipt);
        ArrayList<ManufacturerRemovedEventResponse> responses = new ArrayList<ManufacturerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManufacturerRemovedEventResponse typedResponse = new ManufacturerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ManufacturerRemovedEventResponse> manufacturerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ManufacturerRemovedEventResponse>() {
            @Override
            public ManufacturerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MANUFACTURERREMOVED_EVENT, log);
                ManufacturerRemovedEventResponse typedResponse = new ManufacturerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ManufacturerRemovedEventResponse> manufacturerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MANUFACTURERREMOVED_EVENT));
        return manufacturerRemovedEventFlowable(filter);
    }

    public List<PackagedByManufacturerEventResponse> getPackagedByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PACKAGEDBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<PackagedByManufacturerEventResponse> responses = new ArrayList<PackagedByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PackagedByManufacturerEventResponse typedResponse = new PackagedByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PackagedByManufacturerEventResponse> packagedByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PackagedByManufacturerEventResponse>() {
            @Override
            public PackagedByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PACKAGEDBYMANUFACTURER_EVENT, log);
                PackagedByManufacturerEventResponse typedResponse = new PackagedByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PackagedByManufacturerEventResponse> packagedByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PACKAGEDBYMANUFACTURER_EVENT));
        return packagedByManufacturerEventFlowable(filter);
    }

    public List<ProduceByManufacturerEventResponse> getProduceByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PRODUCEBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ProduceByManufacturerEventResponse> responses = new ArrayList<ProduceByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ProduceByManufacturerEventResponse typedResponse = new ProduceByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ProduceByManufacturerEventResponse> produceByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ProduceByManufacturerEventResponse>() {
            @Override
            public ProduceByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PRODUCEBYMANUFACTURER_EVENT, log);
                ProduceByManufacturerEventResponse typedResponse = new ProduceByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ProduceByManufacturerEventResponse> produceByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PRODUCEBYMANUFACTURER_EVENT));
        return produceByManufacturerEventFlowable(filter);
    }

    public List<PurchasedByRetailerEventResponse> getPurchasedByRetailerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASEDBYRETAILER_EVENT, transactionReceipt);
        ArrayList<PurchasedByRetailerEventResponse> responses = new ArrayList<PurchasedByRetailerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchasedByRetailerEventResponse typedResponse = new PurchasedByRetailerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchasedByRetailerEventResponse> purchasedByRetailerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchasedByRetailerEventResponse>() {
            @Override
            public PurchasedByRetailerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASEDBYRETAILER_EVENT, log);
                PurchasedByRetailerEventResponse typedResponse = new PurchasedByRetailerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchasedByRetailerEventResponse> purchasedByRetailerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASEDBYRETAILER_EVENT));
        return purchasedByRetailerEventFlowable(filter);
    }

    public List<PurchasedByWholesalerEventResponse> getPurchasedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PURCHASEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<PurchasedByWholesalerEventResponse> responses = new ArrayList<PurchasedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PurchasedByWholesalerEventResponse typedResponse = new PurchasedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<PurchasedByWholesalerEventResponse> purchasedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, PurchasedByWholesalerEventResponse>() {
            @Override
            public PurchasedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(PURCHASEDBYWHOLESALER_EVENT, log);
                PurchasedByWholesalerEventResponse typedResponse = new PurchasedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<PurchasedByWholesalerEventResponse> purchasedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(PURCHASEDBYWHOLESALER_EVENT));
        return purchasedByWholesalerEventFlowable(filter);
    }

    public List<ReceivedByRetailerEventResponse> getReceivedByRetailerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDBYRETAILER_EVENT, transactionReceipt);
        ArrayList<ReceivedByRetailerEventResponse> responses = new ArrayList<ReceivedByRetailerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedByRetailerEventResponse typedResponse = new ReceivedByRetailerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedByRetailerEventResponse> receivedByRetailerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceivedByRetailerEventResponse>() {
            @Override
            public ReceivedByRetailerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDBYRETAILER_EVENT, log);
                ReceivedByRetailerEventResponse typedResponse = new ReceivedByRetailerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedByRetailerEventResponse> receivedByRetailerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDBYRETAILER_EVENT));
        return receivedByRetailerEventFlowable(filter);
    }

    public List<ReceivedByWholesalerEventResponse> getReceivedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RECEIVEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ReceivedByWholesalerEventResponse> responses = new ArrayList<ReceivedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ReceivedByWholesalerEventResponse typedResponse = new ReceivedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ReceivedByWholesalerEventResponse> receivedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ReceivedByWholesalerEventResponse>() {
            @Override
            public ReceivedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RECEIVEDBYWHOLESALER_EVENT, log);
                ReceivedByWholesalerEventResponse typedResponse = new ReceivedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ReceivedByWholesalerEventResponse> receivedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RECEIVEDBYWHOLESALER_EVENT));
        return receivedByWholesalerEventFlowable(filter);
    }

    public List<RetailerAddedEventResponse> getRetailerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERADDED_EVENT, transactionReceipt);
        ArrayList<RetailerAddedEventResponse> responses = new ArrayList<RetailerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerAddedEventResponse typedResponse = new RetailerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailerAddedEventResponse> retailerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RetailerAddedEventResponse>() {
            @Override
            public RetailerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILERADDED_EVENT, log);
                RetailerAddedEventResponse typedResponse = new RetailerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailerAddedEventResponse> retailerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILERADDED_EVENT));
        return retailerAddedEventFlowable(filter);
    }

    public List<RetailerRemovedEventResponse> getRetailerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(RETAILERREMOVED_EVENT, transactionReceipt);
        ArrayList<RetailerRemovedEventResponse> responses = new ArrayList<RetailerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RetailerRemovedEventResponse typedResponse = new RetailerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RetailerRemovedEventResponse> retailerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RetailerRemovedEventResponse>() {
            @Override
            public RetailerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(RETAILERREMOVED_EVENT, log);
                RetailerRemovedEventResponse typedResponse = new RetailerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RetailerRemovedEventResponse> retailerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(RETAILERREMOVED_EVENT));
        return retailerRemovedEventFlowable(filter);
    }

    public List<ShippedByManufacturerEventResponse> getShippedByManufacturerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHIPPEDBYMANUFACTURER_EVENT, transactionReceipt);
        ArrayList<ShippedByManufacturerEventResponse> responses = new ArrayList<ShippedByManufacturerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShippedByManufacturerEventResponse typedResponse = new ShippedByManufacturerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ShippedByManufacturerEventResponse> shippedByManufacturerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ShippedByManufacturerEventResponse>() {
            @Override
            public ShippedByManufacturerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SHIPPEDBYMANUFACTURER_EVENT, log);
                ShippedByManufacturerEventResponse typedResponse = new ShippedByManufacturerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ShippedByManufacturerEventResponse> shippedByManufacturerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SHIPPEDBYMANUFACTURER_EVENT));
        return shippedByManufacturerEventFlowable(filter);
    }

    public List<ShippedByWholesalerEventResponse> getShippedByWholesalerEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SHIPPEDBYWHOLESALER_EVENT, transactionReceipt);
        ArrayList<ShippedByWholesalerEventResponse> responses = new ArrayList<ShippedByWholesalerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ShippedByWholesalerEventResponse typedResponse = new ShippedByWholesalerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ShippedByWholesalerEventResponse> shippedByWholesalerEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ShippedByWholesalerEventResponse>() {
            @Override
            public ShippedByWholesalerEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SHIPPEDBYWHOLESALER_EVENT, log);
                ShippedByWholesalerEventResponse typedResponse = new ShippedByWholesalerEventResponse();
                typedResponse.log = log;
                typedResponse.upc = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ShippedByWholesalerEventResponse> shippedByWholesalerEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SHIPPEDBYWHOLESALER_EVENT));
        return shippedByWholesalerEventFlowable(filter);
    }

    public List<TransferOwnershipEventResponse> getTransferOwnershipEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFEROWNERSHIP_EVENT, transactionReceipt);
        ArrayList<TransferOwnershipEventResponse> responses = new ArrayList<TransferOwnershipEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferOwnershipEventResponse typedResponse = new TransferOwnershipEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<TransferOwnershipEventResponse> transferOwnershipEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, TransferOwnershipEventResponse>() {
            @Override
            public TransferOwnershipEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(TRANSFEROWNERSHIP_EVENT, log);
                TransferOwnershipEventResponse typedResponse = new TransferOwnershipEventResponse();
                typedResponse.log = log;
                typedResponse.oldOwner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<TransferOwnershipEventResponse> transferOwnershipEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(TRANSFEROWNERSHIP_EVENT));
        return transferOwnershipEventFlowable(filter);
    }

    public List<WholesalerAddedEventResponse> getWholesalerAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WHOLESALERADDED_EVENT, transactionReceipt);
        ArrayList<WholesalerAddedEventResponse> responses = new ArrayList<WholesalerAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WholesalerAddedEventResponse typedResponse = new WholesalerAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WholesalerAddedEventResponse> wholesalerAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WholesalerAddedEventResponse>() {
            @Override
            public WholesalerAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WHOLESALERADDED_EVENT, log);
                WholesalerAddedEventResponse typedResponse = new WholesalerAddedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WholesalerAddedEventResponse> wholesalerAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WHOLESALERADDED_EVENT));
        return wholesalerAddedEventFlowable(filter);
    }

    public List<WholesalerRemovedEventResponse> getWholesalerRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WHOLESALERREMOVED_EVENT, transactionReceipt);
        ArrayList<WholesalerRemovedEventResponse> responses = new ArrayList<WholesalerRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WholesalerRemovedEventResponse typedResponse = new WholesalerRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WholesalerRemovedEventResponse> wholesalerRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WholesalerRemovedEventResponse>() {
            @Override
            public WholesalerRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WHOLESALERREMOVED_EVENT, log);
                WholesalerRemovedEventResponse typedResponse = new WholesalerRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.account = (String) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WholesalerRemovedEventResponse> wholesalerRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WHOLESALERREMOVED_EVENT));
        return wholesalerRemovedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addManufacturer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addRetailer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addWholesaler(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isManufacturer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isOwner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isRetailer(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isWholesaler(String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> ownerLookup() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNERLOOKUP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceManufacturer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEMANUFACTURER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRetailer() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCERETAILER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceWholesaler() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEWHOLESALER, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(newOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> kill() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_KILL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> produceItemByManufacturer(BigInteger _upc, String _originManufacturerName, String _productNotes, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PRODUCEITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_originManufacturerName), 
                new org.web3j.abi.datatypes.Utf8String(_productNotes), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> packageItemByManufacturer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PACKAGEITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sellItemByManufacturer(BigInteger _upc, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseItemByWholesaler(BigInteger _upc, String _wholesalerName, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PURCHASEITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_wholesalerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> shippedItemByManufacturer(BigInteger _upc, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SHIPPEDITEMBYMANUFACTURER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> receivedItemByWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEDITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sellItemByWholesaler(BigInteger _upc, BigInteger _price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SELLITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.generated.Uint256(_price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> purchaseItemByRetailer(BigInteger _upc, String _retailerName, BigInteger weiValue) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PURCHASEITEMBYRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc), 
                new org.web3j.abi.datatypes.Utf8String(_retailerName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteFunctionCall<TransactionReceipt> shippedItemByWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SHIPPEDITEMBYWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receivedItemByRetailer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RECEIVEDITEMBYRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>> fetchItemBufferOne(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMBUFFERONE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, BigInteger, String, String, String, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (String) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>> fetchItemBufferTwo(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMBUFFERTWO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>>(function,
                new Callable<Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>>() {
                    @Override
                    public Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue(), 
                                (String) results.get(9).getValue(), 
                                (String) results.get(10).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>> fetchWholesaler(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHWHOLESALER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>> fetchRetailer(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHRETAILER, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteFunctionCall<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple9<BigInteger, BigInteger, BigInteger, String, BigInteger, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue(), 
                                (String) results.get(7).getValue(), 
                                (String) results.get(8).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<BigInteger, BigInteger>> fetchitemHistory(BigInteger _upc) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_FETCHITEMHISTORY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_upc)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<BigInteger, BigInteger>>(function,
                new Callable<Tuple2<BigInteger, BigInteger>>() {
                    @Override
                    public Tuple2<BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new SupplyChain(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static SupplyChain load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new SupplyChain(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, contractGasProvider, BINARY, "", initialWeiValue);
    }

    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, contractGasProvider, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, credentials, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    @Deprecated
    public static RemoteCall<SupplyChain> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue) {
        return deployRemoteCall(SupplyChain.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "", initialWeiValue);
    }

    protected String getStaticDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static String getPreviouslyDeployedAddress(String networkId) {
        return _addresses.get(networkId);
    }

    public static class ForSaleByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ForSaleByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ManufacturerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ManufacturerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class PackagedByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ProduceByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class PurchasedByRetailerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class PurchasedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ReceivedByRetailerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ReceivedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class RetailerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class RetailerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class ShippedByManufacturerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class ShippedByWholesalerEventResponse extends BaseEventResponse {
        public BigInteger upc;
    }

    public static class TransferOwnershipEventResponse extends BaseEventResponse {
        public String oldOwner;

        public String newOwner;
    }

    public static class WholesalerAddedEventResponse extends BaseEventResponse {
        public String account;
    }

    public static class WholesalerRemovedEventResponse extends BaseEventResponse {
        public String account;
    }
}
