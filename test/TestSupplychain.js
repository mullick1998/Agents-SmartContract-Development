// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact

var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    var ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const originManufacturerName = "Ratan Tata"
    const originManufacturerInformation = "Tata steel, New Delhi"
    var productID = upc + sku
    const productNotes = "Building Products"
    const productPrice = web3.utils.toWei('1', "ether")
    var itemState = 0
    const wholesalerID = accounts[2]
    const retailerID = accounts[3]



    console.log("<----------------ACCOUNTS----------------> ")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Wholesaler: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])

    console.log("<-------TESTING CONTRACT FUNCTIONS------->")
    // 1st Test
    it("Testing smart contract function produceItem() that allows a manufacturer to produce building products", async() => {
        const supplyChain = await SupplyChain.deployed();

        // Add manufacturer address to manufacturerRole
        await supplyChain.addManufacturer(originManufacturerID)

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.produceItemByManufacturer(upc, originManufacturerName, originManufacturerInformation, productNotes, productPrice, {from:originManufacturerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // check for last past emitted events
        await supplyChain.getPastEvents('ProduceByManufacturer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Update test OwnerID (Following the item ownerID through the contract)
        ownerID = originManufacturerID;

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
        assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    
    // 2nd Test
    it("Testing smart contract function processedItemByWholesaler() that allows a manufacturer to process product", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 1
        // Watch the emitted event ProcessedByManufacturer()
        await supplyChain.processedItemByManufacturer(upc,3,{from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event ProcessedByManufacturer
        await supplyChain.getPastEvents('ProcessedByManufacturer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 3rd Test
    it("Testing smart contract function packageItemByManufacturer() that allows a Manufacturer to package product", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 2;
        //ownerID = reatilerID
        // Mark an item as Sold by calling function buyItem()
        await supplyChain.packageItemByManufacturer(upc,{from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event Shipped
        await supplyChain.getPastEvents('PackagedByManufacturer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 4th Test
    it("Testing smart contract function sellItemByManufacturer() that allows a manufacturer to sell products", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 3
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.sellItemByManufacturer(upc,productPrice,{from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Watch the emitted event Processed()
        await supplyChain.getPastEvents('ForSaleByManufacturer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
            //console.log(events) // same results as the optional callback above
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
        assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 5th Test
    it("Testing smart contract function purchaseItemByWholesaler() that allows a wholesaler to buy product", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.addWholesaler(wholesalerID);

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 4
        var balance = web3.utils.toWei('10', "ether")

        // Mark an item as Packed by calling function packItem()
        await supplyChain.purchaseItemByWholesaler(upc,{from: wholesalerID,value: balance});


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Watch the emitted event Packed()
        await supplyChain.getPastEvents('PurchasedByWholesaler', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
            //console.log(events) // same results as the optional callback above

        });

        //const hash = await supplyChain._upcTxLookup(upc);
        //console.log(hash)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], wholesalerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
        assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 6th Test
    it("Testing smart contract function shippedItemByManufacturer() that allows a manufacturer to ship cheese ", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 5
        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.shippedItemByManufacturer(upc,{from: originManufacturerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)


        // Watch the emitted event ForSale()
        await supplyChain.getPastEvents('ShippedByManufacturer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;

        });
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], wholesalerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[3], originManufacturerID, 'Error: Missing or Invalid originManufacturerID')
        assert.equal(resultBufferOne[4], originManufacturerName, 'Error: Missing or Invalid originManufacturerName')
        assert.equal(resultBufferOne[5], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid price')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 7th Test
    it("Testing smart contract function receivedItemByWholesaler() that allows a wholesaler to receive product", async() => {
        const supplyChain = await SupplyChain.deployed()
        //await supplyChain.addWholesaler(wholesalerID);

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 6

        // Mark an item as Sold by calling function buyItem()
        await supplyChain.receivedItemByWholesaler(upc,{from: wholesalerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Watch the emitted event Sold()
        await supplyChain.getPastEvents('ReceivedByWholesaler', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // change ownerID to wholesalerID
        //ownerID = wholesalerID

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[2], wholesalerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], wholesalerID, 'Error: Invalid wholesalerID ')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 8th Test
    it("Testing smart contract function sellItemByWholesaler() that allows a wholesaler to sell product", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 7;

        //ownerID = consumerID;

        await supplyChain.sellItemByWholesaler(upc,productPrice,{from: wholesalerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event Shipped
        await supplyChain.getPastEvents('ForSaleByWholesaler', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[2], wholesalerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], wholesalerID, 'Error: Invalid wholesalerID ')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 9th Test
    it("Testing smart contract function purchaseItemByRetailer() that allows a retailer to purchase product", async() => {
        const supplyChain = await SupplyChain.deployed()

        await supplyChain.addRetailer(retailerID);
        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 8;

        var balance = web3.utils.toWei('10', "ether")

        await supplyChain.purchaseItemByRetailer(upc,{from: retailerID,value: balance});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event Shipped
        await supplyChain.getPastEvents('PurchasedByRetailer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Invalid retailerID ')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 10th Test
    it("Testing smart contract function shippedItemByWholesaler() that allows a wholesaler to ship product", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 9;

        //ownerID = consumerID;

        await supplyChain.shippedItemByWholesaler(upc,{from: wholesalerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event Shipped
        await supplyChain.getPastEvents('ShippedByWholesaler', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], wholesalerID, 'Error: Invalid wholesalerID ')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    // 11th Test
    it("Testing smart contract function receivedItemByRetailer() that allows a retailer to receive product", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        itemState = 10;

        //ownerID = consumerID;

        await supplyChain.receivedItemByRetailer(upc,{from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Watch the emitted event Shipped
        await supplyChain.getPastEvents('ReceivedByRetailer', {
            fromBlock: 0,
            toBlock: 'latest'
        }, (error, events) => { console.log(events,error); })
        .then((events) => {
            eventEmitted = true;
        });

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID,'Error: Missing or Invalid productID')
        assert.equal(resultBufferOne[2], retailerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], itemState, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[8], retailerID, 'Error: Invalid wholesalerID ')
        assert.equal(eventEmitted, true, 'Invalid event emitted')

    })

    
    // 12th Test
    it("Testing smart contract function fetchItemBufferOne()", async() => {
        const supplyChain = await SupplyChain.deployed();

        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc);
        // Verify the result set
        assert.equal(resultBufferOne[0],sku,"Error: Invalid item SKU")
        assert.equal(resultBufferOne[1],upc,"Error: Invalid item UPC")
        assert.equal(resultBufferOne[3],originManufacturerID,"Error: Invalid originManufacturerID")
        assert.equal(resultBufferOne[4],originManufacturerName,"Error: Invalid originManufacturerName")
        assert.equal(resultBufferOne[5],originManufacturerInformation,"Error: Invalid originManufacturerInformation")

    })

    // 13th Test
    it("Testing smart contract function fetchItemBufferTwo()", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc);
        // Verify the result set
        assert.equal(resultBufferTwo[0],sku, "Error: Invalid item SKU")
        assert.equal(resultBufferTwo[1],upc, "Error: Invalid item UPC")
        assert.equal(resultBufferTwo[2],productID, "Error: Invalid item productID")
        assert.equal(resultBufferTwo[3],productNotes, "Error: Invalid productnote")
        assert.equal(resultBufferTwo[4],productPrice, "Error: Invalid productPrice")
        assert.equal(resultBufferTwo[6],itemState, "Error: Invalid itemState")
        assert.equal(resultBufferTwo[7],wholesalerID, "Error: Invalid wholesalerID")
        assert.equal(resultBufferTwo[8],retailerID, "Error: Invalid retailerID")

    })
// async function to help check block hashTx
async function getTx(blockNumber){
    let tx1 = await web3.eth.getBlock(blockNumber);
    return  (await web3.eth.getTransaction(tx1.transactions[0]));
}

    // 16th Test
    it("Testing smart contract function fetchItemHistory()", async() => {
        const supplyChain = await SupplyChain.deployed()
        const resultItemHistory = await supplyChain.fetchitemHistory(upc);
        // get TX value from block number
        const MTW = await getTx(resultItemHistory[0].toString());
        const WTR = await getTx(resultItemHistory[1].toString());
        // Verify the result set 
        assert.equal(MTW.from,wholesalerID,"Error: Invalid transaction between manufacturer and wholesaler")
        assert.equal(WTR.from,retailerID,"Error: Invalid transaction between retailer and wholesaler")
        

    })

});
